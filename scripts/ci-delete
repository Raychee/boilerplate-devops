#!/usr/bin/env bash
# This file:
#
#  - Deletes a feature / hotfix / release branch.
#
# Usage:
#
#  LOG_LEVEL=7 ci-delete feature/01


# shellcheck source=lib/common-variables
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/lib/common-variables"


### Parse commandline options
##############################################################################

# Commandline options. This defines the usage page, and is used to parse cli
# opts & defaults from. The parsing is unforgiving so be precise in your syntax
# - A short option must be preset for every long option; but every short option
#   need not have a long option
# - `--` is respected as the separator between options and arguments
# - We do not bash-expand defaults, so setting '~/app' as a default will not resolve to ${HOME}.
#   you can use bash variables to work around this (so use ${HOME} instead)

# shellcheck disable=SC2015
read -r -d '' __usage <<- EOF || true # exits non-zero when EOF encountered
  -y --yes               Skip confirmation before deletion of the branch.
  -h --help              This page.
  
  {branch}               The target branch to delete. Required.
EOF

# shellcheck disable=SC2015
read -r -d '' __helptext <<- EOF || true # exits non-zero when EOF encountered
 This script deletes a supporting branch (${BRANCH_NAME_FEATURE} / ${BRANCH_NAME_RELEASE} / ${BRANCH_NAME_HOTFIX})
 both locally and remotely. In addition, if there are any pull requests about the branch, they will be closed too. 
 
 This is a dangerous operation. Please use with care!
EOF

# shellcheck source=lib/ci-common
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/lib/ci-common"


### Runtime
##############################################################################

setup

__branch_name="${arg_branch:?}"

if [[ ${__branch_name} != ${BRANCH_NAME_FEATURE}/* && ${__branch_name} != ${BRANCH_NAME_RELEASE}/* && 
      ${__branch_name} != ${BRANCH_NAME_HOTFIX}/* ]]; then
  error "Branch \"${__branch_name}\" is not allowed be deleted."
  exit 1
fi

if ! is_branch_existing "${__branch_name}"; then
  error "Branch \"${__branch_name}\" does not exist."
  exit 1
fi

__confirm=

if [[ ${arg_y:-} = "1" ]]; then
  info "Delete branch \"${__branch_name}\" and close its pull requests, if any."
  __confirm=1
else
  read -p "Delete branch \"${__branch_name}\" and close its pull requests, if any (y/N)? " -n 1 -r
  if [[ ${REPLY} =~ ^[yY]$ ]]; then
    __confirm=1
  fi
fi

if [[ "${__confirm:-}" = "1" ]]; then
  __current_branch=$(current_branch_name)
  if [[ ${__current_branch} = "${__branch_name}" ]]; then
    exec_with_info git checkout "${BRANCH_NAME_DEVELOP}"
  fi
  info "Check pull requests of branch \"${__branch_name}\"."
  IFS=$'\n' read -r -d '' -a __existing_prs < <(github_prs_for_branch "${__branch_name}" && printf '\0')
  if is_array __existing_prs; then
    for __pr in "${__existing_prs[@]}"; do
      info "Close pull request ${__pr}."
      gh pr close "${__pr}"
    done
  fi
  info "Delete branch \"${__branch_name}\" locally and remotely."
  exec_with_info git branch -d "${__branch_name}"
  exec_with_info git push "${REMOTE_ORIGIN}" --delete "${__branch_name}"
fi
