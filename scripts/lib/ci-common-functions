#!/usr/bin/env bash


# shellcheck source=common-variables
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common-variables"

# shellcheck source=common-functions
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common-functions"


function is_git_repo() {
  git rev-parse --git-dir > /dev/null 2>&1
}

function current_branch_name() {
  local branch_name
  branch_name=$(git symbolic-ref -q HEAD)
  branch_name=${branch_name##refs/heads/}
  branch_name=${branch_name:-HEAD}
  echo "$branch_name"
}

function is_branch_existing() {
  local branch
  branch="${1:-}"
  if [[ -z "${branch:-}" ]]; then
    return 1
  fi
  local branch_name
  branch_name=$(git branch --list "${branch}" | head -n 1)
  [[ -n $branch_name ]]
}

function is_tag_existing() {
  git rev-parse "refs/tags/$1" > /dev/null 2>&1
}

function git_local_branches_without_origin() {
    git branch --remote --list "${REMOTE_ORIGIN}/*" | \
      sed -E -e "s/^[ \*]*${REMOTE_ORIGIN}\///" -e 's/(\^|\$|\.|\$|\*|\?|\-|\{|\}|\(|\))/\\\1/g' -e 's/(.*)/\^\1\$/' | \
      grep -E -v -f /dev/fd/0 <(git branch | sed -E 's/^[ \*]*//') || true
}

function git_direct_ancestor_branch() {
    local branch_type
    local base
    local release_commit
    branch_type="${1:?}"
    base="${2:-${BRANCH_NAME_MASTER}}"
    release_commit="$(git_direct_ancestor_hash "${branch_type}" "${base}" | head -n 1)"
    if [[ -n "${release_commit:-}" ]]; then
      git branch --remote --points-at "${release_commit}" --list "${REMOTE_ORIGIN}/${branch_type}/*" | \
        sed -E "s/^[ \*]*${REMOTE_ORIGIN}\///"
    fi
}

function git_direct_ancestor_hash() {
  local branch_type
  local base
  branch_type="${1:?}"
  base="${2:-${BRANCH_NAME_MASTER}}"
  git branch --remote --list "${REMOTE_ORIGIN}/${branch_type}/*" | \
    sed -E "s/^[ \*]*//" | xargs -I {} git rev-parse --verify {} | \
    grep -f /dev/fd/0 <(git rev-parse "${base}^@") || true
}

function github_prs_for_branch() {
  local branch_name
  branch_name=${1:?}
  gh pr list --state open --limit 100 | grep "\t${branch_name}\t" | sed -E "s/^([0-9]+)\t.*$/\\1/" || true
}

function is_version() {
  local version
  version=${1:-}
  [[ $version =~ ^(${PROJECT_VERSION_PREFIX})?[0-9]+\.[0-9]+\.[0-9]+$   ]]
}

function validate_version() {
  local version
  version=${1:-}
  if [[ -z "${version:-}" ]]; then
    error "No version provided."
    return 5
  fi
  if ! is_version "${version}"; then
    error "\"${version}\" is not a valid version."
    return 1
  fi
}

function ensure_version_tag() {
  local version
  version=${1:-}
  validate_version "${version}"
  if [[ ${version} =~ ^${PROJECT_VERSION_PREFIX}.*$ ]]; then
    echo "${version}"
  else
    echo "${PROJECT_VERSION_PREFIX}${version}"
  fi
}

function ensure_pure_version() {
  local version
  version=${1:-}
  validate_version "${version}"
  echo "${version#${PROJECT_VERSION_PREFIX}}"
}

function version_bump() {
  local version
  local bump_method
  local version_fields
  local version_major
  local version_minor
  local version_patch
  bump_method=${1:-}
  version=${2:-}
  version="$(ensure_pure_version "${version}")"
  IFS='.' read -ra version_fields <<< "${version}"
  version_major="${version_fields[0]}"
  version_minor="${version_fields[1]}"
  version_patch="${version_fields[2]}"
  if [[ ${bump_method} == "major" ]]; then
    version_major=$((version_major + 1))
    version_minor=0
    version_patch=0
  elif [[ ${bump_method} == "minor" ]]; then
    version_minor=$((version_minor + 1))
    version_patch=0
  elif [[ ${bump_method} == "patch" ]]; then
    version_patch=$((version_patch + 1))
  else
    error "Unknown version bump method: ${bump_method}."
    return 5
  fi
  echo "${PROJECT_VERSION_PREFIX}${version_major}.${version_minor}.${version_patch}"
}

function compare_version() {
  local version1
  local version1_fields
  local version2
  local version2_fields
  version1="${1:-}"
  version1="$(ensure_pure_version "${version1}")"
  IFS='.' read -ra version1_fields <<< "${version1}"
  version2="${2:-}"
  version2="$(ensure_pure_version "${version2}")"
  IFS='.' read -ra version2_fields <<< "${version2}"
  for field in {0..2}; do
    if [[ "${version1_fields[${field}]}" -gt "${version2_fields[${field}]}" ]]; then
      echo "1"
      return
    elif [[ "${version1_fields[${field}]}" -lt "${version2_fields[${field}]}" ]]; then
      echo "-1"
      return
    fi
  done
  echo "0"
}
