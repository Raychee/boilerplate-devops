#!/usr/bin/env bash
# This file:
#
#  - Build images. 
#
# Usage:
#
#  LOG_LEVEL=7 build -i jenkins:0.1.0


# shellcheck source=lib/common-variables
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/lib/common-variables"


### Variable Definition
##############################################################################

DIR_IMAGES="${DIR_IMAGES:-images}"
DOCKER_NAMESPACE="${DOCKER_NAMESPACE:-}"
SCRIPT_PREBUILD_NAME="prebuild"


### Parse commandline options
##############################################################################

# Commandline options. This defines the usage page, and is used to parse cli
# opts & defaults from. The parsing is unforgiving so be precise in your syntax
# - A short option must be preset for every long option; but every short option
#   need not have a long option
# - `--` is respected as the separator between options and arguments
# - We do not bash-expand defaults, so setting '~/app' as a default will not resolve to ${HOME}.
#   you can use bash variables to work around this (so use ${HOME} instead)

# shellcheck disable=SC2015
read -r -d '' __usage <<-EOF || true # exits non-zero when EOF encountered
  -t --tag      [tag] Image tag version to be built.
                      If not specified, infer in the following order:
                      - the version tag in the image directory name, if any;
                      - the git tag of the current commit as the version tag, if any;
                      - the current git commit hash as the version tag.
  -a --all            Build all images inside "${DIR_IMAGES}" folder. Required if -i (--image) is not provided.
  -f --force          Force building the image(s) even if they already exist.
  -h --help           This page.
  
  ...images           Image names to be built. Can be repeated. Required if -a (--all) is not provided.
EOF

# shellcheck disable=SC2015
read -r -d '' __helptext <<-EOF || true # exits non-zero when EOF encountered
 This script builds the images inside the "${DIR_IMAGES}" folder.
EOF


# shellcheck source=lib/common
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/lib/common"


### Validation. Error out if the things required for your script are not present
##############################################################################

if [[ -z "${DOCKER_NAMESPACE:-}" ]]; then
  error "Variable DOCKER_NAMESPACE need to be defined for building images."
  exit 1
fi

[[ "${arg_images:-}" || "${arg_a:?}" = "1" ]] || help "Either images or -a (--all) is required."
[[ "${arg_images:-}" && "${arg_a:?}" = "1" ]] && help "images or -a (--all) cannot be specified at the same time."

if is_array arg_images; then
  for __image_name in "${arg_images[@]}"; do
    if [[ ! -d "${DIR_IMAGES}/${__image_name}" ]]; then
      help "Image name ${__image_name} does not exist in folder \"${DIR_IMAGES}\"."
    fi
  done
fi


### Runtime
##############################################################################

if is_array arg_images; then
  __image_names=("${arg_images[@]}")
else
  __image_names=()
  for __image_dir_path in "${DIR_IMAGES}"/*; do
    if [[ -d "${__image_dir_path}" ]]; then
      __image_names+=("${__image_dir_path##*/}")
    fi
  done
fi

if ! is_array __image_names; then
  notice "There are no images to be built."
  exit
fi

for __image_dir_name in "${__image_names[@]}"; do
  
  info "Process image building for ${__image_dir_name}."
  
  if [[ "${__image_dir_name}" =~ : ]]; then
    __image_name=${__image_dir_name%:*}
    __image_version=${__image_dir_name##*:}
  else
    __image_name=${__image_dir_name}
    __image_version=$(get_latest_version_tag)
    if [[ -z "${__image_version:-}" ]]; then
      __image_version="$(git rev-parse --verify --short HEAD)"
    fi
    __image_version=${__image_version#${PROJECT_VERSION_PREFIX}}
    if [[ -n "${__image_version}" ]]; then
      info "The image version of ${__image_name} is inferred as ${__image_version}."
    fi
  fi
  if [[ -z "${__image_version:-}" ]]; then
    error "Image version of ${__image_name} cannot be inferred."
    exit 2
  fi
  __image_tag="${DOCKER_NAMESPACE}/${__image_name}:${__image_version}"
  __image_dir="${DIR_IMAGES}/${__image_dir_name}"
  
  if [[ "${arg_f:-}" = "1" ]] || ! is_docker_image_exist "${__image_tag}"; then
    __custom_build_script_path="${__image_dir}/${SCRIPT_PREBUILD_NAME}"
    if [[ -s "${__custom_build_script_path}" ]]; then
      info "Execute customized prebuild script in ${__custom_build_script_path}."
      # shellcheck disable=SC1090
      (cd "${__image_dir}" && ./"${SCRIPT_PREBUILD_NAME}")
    fi
    info "Build image: ${__image_name}:${__image_version}"
    exec_with_debug docker build -t "${__image_tag}" "${__image_dir}"
    exec_with_debug docker push "${__image_tag}"
  else
    info "Image ${__image_tag} already exists."
  fi
  
  info "Complete image building for ${__image_dir_name}."
  
done
