#!/usr/bin/env bash
# This file:
#
#  - Deploy services into docker swarm. 
#
# Usage:
#
#  LOG_LEVEL=7 deploy


# shellcheck source=lib/common-variables
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/lib/common-variables"


### Global Variable Definition
##############################################################################

DIR_DEPLOYMENTS="${DIR_DEPLOYMENTS:-deployments}"
PROJECT_NAME="${PROJECT_NAME:-}"


### Parse commandline options
##############################################################################

# Commandline options. This defines the usage page, and is used to parse cli
# opts & defaults from. The parsing is unforgiving so be precise in your syntax
# - A short option must be preset for every long option; but every short option
#   need not have a long option
# - `--` is respected as the separator between options and arguments
# - We do not bash-expand defaults, so setting '~/app' as a default will not resolve to ${HOME}.
#   you can use bash variables to work around this (so use ${HOME} instead)

# shellcheck disable=SC2015
read -r -d '' __usage <<-EOF || true # exits non-zero when EOF encountered
  -p --ps        Invoke command "docker stack ps <stack>".
  -s --services  Invoke command "docker stack services <stack>".
  -r --rm        Invoke command "docker stack rm <stack>".
  -n --no-build  Skip image building checks before deploying.
  -h --help      This page.
        
  [stack]        The stack name to deploy. Default="${PROJECT_NAME}".
                 The stack name should match one of the directory name inside "${DIR_DEPLOYMENTS}".
                 If this is the only argument and no others are provided, this script will invoke command 
                 "docker stack deploy <stack>". 
EOF

# shellcheck disable=SC2015
read -r -d '' __helptext <<-EOF || true # exits non-zero when EOF encountered
 This script will deploy or update a docker stack based on project's environment configurations.
 Note: Please switch to the desired environment before calling this script.
EOF

# shellcheck source=lib/common
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/lib/common"


### Dependent Variable Definition
##############################################################################

__var_project_environment="$(to_upper "${PROJECT_NAME}")_ENVIRONMENT"
PROJECT_ENVIRONMENT="${!__var_project_environment:-}"


### Functions
##############################################################################

function is_docker_compose_only() {
    grep "^\s*docker_compose_only: true\s*$" -q "${1}"
}


### Validation. Error out if the things required for your script are not present
##############################################################################

[[ "${arg_stack:-}" ]] || \
  help "Stack name is not provided and cannot be inferred (variable PROJECT_NAME is not defined)."

[[ -d "${DIR_DEPLOYMENTS}/${arg_stack:?}" ]] || 
  help "Stack name \"${arg_stack:?}\" does not exist in folder \"${DIR_DEPLOYMENTS}\"."

[[ ${arg_stack:?} = "${PROJECT_NAME}" && -z "${PROJECT_ENVIRONMENT:-}" ]] && \
  help "Variable ${__var_project_environment} need to be defined for project stack \"${PROJECT_NAME}\"."

if [[ "${PROJECT_ENVIRONMENT:-}" ]]; then
  [[ "${PROJECT_ENVIRONMENT}" = "dev" || "${PROJECT_ENVIRONMENT}" = "test" ||
     "${PROJECT_ENVIRONMENT}" = "staging" || "${PROJECT_ENVIRONMENT}" = "release" ]] || \
    help "Variable ${__var_project_environment} should be either of the followings: dev test staging production," \
         "got \"${PROJECT_ENVIRONMENT}\""
fi

if [[ -z "${DOCKER_NAMESPACE:-}" ]]; then
  error "Variable DOCKER_NAMESPACE need to be defined for deploying images."
  exit 1
fi


### Runtime
##############################################################################

if [[ ${arg_stack} = "${PROJECT_NAME}" ]]; then
  __stack="${PROJECT_NAME}_${PROJECT_ENVIRONMENT}"
else 
  __stack="${arg_stack}"
fi
__docker_compose_dir="${DIR_DEPLOYMENTS}/${arg_stack}"
__docker_compose_file="${__docker_compose_dir}/docker-compose.yml"
__docker_compose_file_common="${__docker_compose_dir}/docker-compose.common.yml"
__docker_compose_file_env="${__docker_compose_dir}/docker-compose.${PROJECT_ENVIRONMENT}.yml"
if [[ ${arg_stack} = "${PROJECT_NAME}" ]]; then
  if [[ ! -s "${__docker_compose_file_common}" ]]; then
    error "Docker compose file ${__docker_compose_file_common} is not found."
    exit 1
  elif [[ ! -s "${__docker_compose_file_env}" ]]; then
    error "Docker compose file ${__docker_compose_file_env} is not found."
    exit 1
  fi
fi
__docker_compose_only="0"
__docker_compose_args="--project-name ${__stack}"
__docker_deploy_args=
if [[ -s "${__docker_compose_file}" ]]; then
  if is_docker_compose_only "${__docker_compose_file}"; then
    __docker_compose_only="1"
  fi
  __docker_compose_args="${__docker_compose_args} --file ${__docker_compose_file}"
  __docker_deploy_args="--compose-file ${__docker_compose_file}"
elif [[ -s "${__docker_compose_file_common}" && -s "${__docker_compose_file_env}" ]]; then
  if is_docker_compose_only "${__docker_compose_file_common}"; then
    __docker_compose_only="1"
  fi
  __docker_compose_args="${__docker_compose_args} --file ${__docker_compose_file_common} --file ${__docker_compose_file_env}"
  __docker_deploy_args="--compose-file ${__docker_compose_file_common} --compose-file ${__docker_compose_file_env}"
else
  error "Neither file \"docker-compose.yml\" nor files \"docker-compose.common.yml\" and" \
        "\"docker-compose.${PROJECT_ENVIRONMENT}.yml\" have been found in ${__docker_compose_dir}."
fi

if [[ ${arg_p:?} = "1" ]]; then
  
  if [[ "${__docker_compose_only}" = "1" ]]; then
    exec_with_debug docker-compose "${__docker_compose_args}" ps
  else
    exec_with_debug docker stack ps "${__stack}"
  fi
  
elif [[ ${arg_s:?} = "1" ]]; then
  
  if [[ "${__docker_compose_only}" = "1" ]]; then
    exec_with_debug docker-compose "${__docker_compose_args}" ps
  else
    exec_with_debug docker stack services "${__stack}"
  fi

elif [[ ${arg_r:?} = "1" ]]; then
  
  if [[ "${__docker_compose_only}" = "1" ]]; then
    exec_with_debug docker-compose "${__docker_compose_args}" stop
    exec_with_debug docker-compose "${__docker_compose_args}" rm --force
  else
    exec_with_debug docker stack rm "${__stack}"  
  fi
  
else
  
  if [[ "${arg_n:?}" = "0" ]]; then
    info "Ensure all the images are built."
    "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"/build -a
  fi
  if [[ "${__docker_compose_only}" = "1" ]]; then
    info "Stack ${__stack} is for docker-compose only. Deploy with \"docker-compose up\"."
    exec_with_debug docker-compose "${__docker_compose_args}" up --detach
  else
    info "Deploy stack ${__stack} into swarm."
    exec_with_debug docker stack deploy "${__docker_deploy_args}" "${__stack}"  
  fi
  
fi
