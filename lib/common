#!/usr/bin/env bash
# This file:
#
#  - Provide common functionalities for other scripts. 
#
# Usage (in other scripts before argument validation and runtime):
#
#  source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/lib/common" 
#  
# Based on a template by BASH3 Boilerplate v2.4.1
# http://bash3boilerplate.sh/#authors
#
# The MIT License (MIT)
# Copyright (c) 2013 Kevin van Zonneveld and contributors
# You are not obligated to bundle the LICENSE file with your b3bp projects as long
# as you leave these references intact in the header comments of your source files.

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  __i_am_main_script="0" # false

  if [[ "${__usage+x}" ]]; then
    if [[ "${BASH_SOURCE[1]}" = "${0}" ]]; then
      __i_am_main_script="1" # true
    fi

    __b3bp_external_usage="true"
    __b3bp_tmp_source_idx=1
  fi
else
  __i_am_main_script="1" # true
  [[ "${__usage+x}" ]] && unset -v __usage
  [[ "${__helptext+x}" ]] && unset -v __helptext
fi

# Set magic variables for current file, directory, os, etc.
__dir="$(cd "$(dirname "${BASH_SOURCE[${__b3bp_tmp_source_idx:-0}]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[${__b3bp_tmp_source_idx:-0}]}")"
__base="$(basename "${__file}" .sh)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "${__file}")$( (($#)) && printf ' %q' "$@" || true)"


### Variable Definition
##############################################################################

# shellcheck source=common-variables
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common-variables"


### Functions
##############################################################################

# shellcheck source=common-functions
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common-functions"

function __detect_default() {
  local default_value
  local default_regex
  if [[ "${1}" =~ \ Default= ]]; then
    # take default
    default_value="${1##*Default=}"
    # strip double quotes from default argument
    default_regex='^"(.*)"\.?$'
    if [[ "${default_value}" =~ ${default_regex} ]]; then
      default_value="${BASH_REMATCH[1]}"
    else
      # strip single quotes from default argument
      default_regex="^'(.*)'\.?$"
      if [[ "${default_value}" =~ ${default_regex} ]]; then
        default_value="${BASH_REMATCH[1]}"
      fi
    fi
  fi
  echo "${default_value}"
}


### Parse commandline options
##############################################################################

# Commandline options. This defines the usage page, and is used to parse cli
# opts & defaults from. The parsing is unforgiving so be precise in your syntax
# - A short option must be preset for every long option; but every short option
#   need not have a long option
# - `--` is respected as the separator between options and arguments
# - We do not bash-expand defaults, so setting '~/app' as a default will not resolve to ${HOME}.
#   you can use bash variables to work around this (so use ${HOME} instead)

# shellcheck disable=SC2015
[[ "${__usage+x}" ]] || read -r -d '' __usage <<-EOF || true # exits non-zero when EOF encountered
  -h --help         This page.
EOF

# shellcheck disable=SC2015
[[ "${__helptext+x}" ]] || read -r -d '' __helptext <<-EOF || true # exits non-zero when EOF encountered
 This script has no help information.
EOF

# Translate usage string -> getopts arguments, and set $arg_<flag> defaults
__b3bp_tmp_pos_opt_required=()
__b3bp_tmp_pos_opt_optional=()
__b3bp_tmp_pos_opt_varargs=
while read -r __b3bp_tmp_line; do
  
  if [[ "${__b3bp_tmp_line}" =~ ^\{[0-9a-zA-Z]+\} ]]; then
    # this line describes a required positional arg
    __b3bp_tmp_pos_opt="${__b3bp_tmp_line#\{}"
    __b3bp_tmp_pos_opt="${__b3bp_tmp_pos_opt%%\}*}"
    __b3bp_tmp_pos_opt_required+=("${__b3bp_tmp_pos_opt}")
    continue 
  fi
  if [[ "${__b3bp_tmp_line}" =~ ^\[[0-9a-zA-Z]+\] ]]; then
    # this line describes an optional positional arg
    __b3bp_tmp_pos_opt="${__b3bp_tmp_line#\[}"
    __b3bp_tmp_pos_opt="${__b3bp_tmp_pos_opt%%]*}"
    __b3bp_tmp_pos_opt_optional+=("${__b3bp_tmp_pos_opt}")
    printf -v "arg_${__b3bp_tmp_pos_opt}" '%s' "$(__detect_default "${__b3bp_tmp_line}")"
    continue
  fi
  if [[ "${__b3bp_tmp_line}" =~ ^\.\.\.[0-9a-zA-Z]+ ]]; then
    # this line describes a required positional arg
    __b3bp_tmp_pos_opt="${__b3bp_tmp_line#...}"
    __b3bp_tmp_pos_opt="${__b3bp_tmp_pos_opt%% *}"
    __b3bp_tmp_pos_opt_varargs="${__b3bp_tmp_pos_opt}"
    continue
  fi
  
  if [[ "${__b3bp_tmp_line}" =~ ^- ]]; then
    # fetch single character version of option string
    __b3bp_tmp_opt="${__b3bp_tmp_line%% *}"
    __b3bp_tmp_opt="${__b3bp_tmp_opt:1}"

    # fetch long version if present
    __b3bp_tmp_long_opt=""

    if [[ "${__b3bp_tmp_line}" = *"--"* ]]; then
      __b3bp_tmp_long_opt="${__b3bp_tmp_line#*--}"
      __b3bp_tmp_long_opt="${__b3bp_tmp_long_opt%% *}"
    fi

    # map opt long name to+from opt short name
    printf -v "__b3bp_tmp_opt_long2short_${__b3bp_tmp_long_opt//-/_}" '%s' "${__b3bp_tmp_opt}"
    printf -v "__b3bp_tmp_opt_short2long_${__b3bp_tmp_opt}" '%s' "${__b3bp_tmp_long_opt//-/_}"

    # check if option takes an argument
    if [[ "${__b3bp_tmp_line}" =~ \[.*\] ]]; then
      __b3bp_tmp_opt="${__b3bp_tmp_opt}:" # add : if opt has arg
      __b3bp_tmp_init=""  # it has an arg. init with ""
      printf -v "__b3bp_tmp_has_arg_${__b3bp_tmp_opt:0:1}" '%s' "1"
    elif [[ "${__b3bp_tmp_line}" =~ \{.*\} ]]; then
      __b3bp_tmp_opt="${__b3bp_tmp_opt}:" # add : if opt has arg
      __b3bp_tmp_init=""  # it has an arg. init with ""
      # remember that this option requires an argument
      printf -v "__b3bp_tmp_has_arg_${__b3bp_tmp_opt:0:1}" '%s' "2"
    else
      __b3bp_tmp_init="0" # it's a flag. init with 0
      printf -v "__b3bp_tmp_has_arg_${__b3bp_tmp_opt:0:1}" '%s' "0"
    fi
    __b3bp_tmp_opts="${__b3bp_tmp_opts:-}${__b3bp_tmp_opt}"

    if [[ "${__b3bp_tmp_line}" =~ ^Can\ be\ repeated\. ]] || [[ "${__b3bp_tmp_line}" =~ \.\ *Can\ be\ repeated\. ]]; then
      # remember that this option can be repeated
      printf -v "__b3bp_tmp_is_array_${__b3bp_tmp_opt:0:1}" '%s' "1"
    else
      printf -v "__b3bp_tmp_is_array_${__b3bp_tmp_opt:0:1}" '%s' "0"
    fi
  fi

  [[ "${__b3bp_tmp_opt:-}" ]] || continue

  if [[ "${__b3bp_tmp_line}" =~ ^Required\. ]] || [[ "${__b3bp_tmp_line}" =~ \.\ *Required\. ]]; then
    # remember that this option requires an argument
    printf -v "__b3bp_tmp_has_arg_${__b3bp_tmp_opt:0:1}" '%s' "2"
  fi
  
  # ignore default value if option does not have an argument
  __b3bp_tmp_varname="__b3bp_tmp_has_arg_${__b3bp_tmp_opt:0:1}"
  if [[ "${!__b3bp_tmp_varname}" != "0" ]]; then
    __b3bp_tmp_init_default=$(__detect_default "${__b3bp_tmp_line}")
    __b3bp_tmp_init=${__b3bp_tmp_init_default:-${__b3bp_tmp_init}}
  fi

  # Init var with value unless it is an array / a repeatable
  __b3bp_tmp_varname="__b3bp_tmp_is_array_${__b3bp_tmp_opt:0:1}"
  [[ "${!__b3bp_tmp_varname}" = "0" ]] && printf -v "arg_${__b3bp_tmp_opt:0:1}" '%s' "${__b3bp_tmp_init}"
done <<< "${__usage:-}"

# run getopts only if options were specified in __usage

set +o nounset # unexpected arguments will cause unbound variables
               # to be dereferenced

if [[ "${__b3bp_tmp_opts:-}" ]]; then
  # Allow long options like --this
  __b3bp_tmp_opts="${__b3bp_tmp_opts}-:"

  # Reset in case getopts has been used previously in the shell.
  OPTIND=1

  # start parsing command line
  # Overwrite $arg_<flag> defaults with the actual CLI options
  while getopts "${__b3bp_tmp_opts}" __b3bp_tmp_opt; do
    [[ "${__b3bp_tmp_opt}" = "?" ]] && help "Invalid use of script: ${*} "

    if [[ "${__b3bp_tmp_opt}" = "-" ]]; then
      # OPTARG is long-option-name or long-option=value
      if [[ "${OPTARG}" =~ .*=.* ]]; then
        # --key=value format
        __b3bp_tmp_long_opt=${OPTARG/=*/}
        # Set opt to the short option corresponding to the long option
        __b3bp_tmp_varname="__b3bp_tmp_opt_long2short_${__b3bp_tmp_long_opt//-/_}"
        printf -v "__b3bp_tmp_opt" '%s' "${!__b3bp_tmp_varname}"
        OPTARG=${OPTARG#*=}
      else
        # --key value format
        # Map long name to short version of option
        __b3bp_tmp_varname="__b3bp_tmp_opt_long2short_${OPTARG//-/_}"
        printf -v "__b3bp_tmp_opt" '%s' "${!__b3bp_tmp_varname}"
        # Only assign OPTARG if option takes an argument
        __b3bp_tmp_varname="__b3bp_tmp_has_arg_${__b3bp_tmp_opt}"
        __b3bp_tmp_varvalue="${!__b3bp_tmp_varname}"
        [[ "${__b3bp_tmp_varvalue}" != "0" ]] && __b3bp_tmp_varvalue="1"
        printf -v "OPTARG" '%s' "${@:OPTIND:${__b3bp_tmp_varvalue}}"
        # shift over the argument if argument is expected
        ((OPTIND+=__b3bp_tmp_varvalue))
      fi
      # we have set opt/OPTARG to the short value and the argument as OPTARG if it exists
    fi

    __b3bp_tmp_value="${OPTARG}"

    __b3bp_tmp_varname="__b3bp_tmp_is_array_${__b3bp_tmp_opt:0:1}"
    if [[ "${!__b3bp_tmp_varname}" != "0" ]]; then
      # repeatables
      # shellcheck disable=SC2016
      if [[ -z "${OPTARG}" ]]; then
        # repeatable flags, they increcemnt
        __b3bp_tmp_varname="arg_${__b3bp_tmp_opt:0:1}"
          # shellcheck disable=SC2004
        __b3bp_tmp_value=$((${!__b3bp_tmp_varname} + 1))
        printf -v "${__b3bp_tmp_varname}" '%s' "${__b3bp_tmp_value}"
      else
        # repeatable args, they get appended to an array
        __b3bp_tmp_varname="arg_${__b3bp_tmp_opt:0:1}[@]"
        declare -a "${__b3bp_tmp_varname}"='("${!__b3bp_tmp_varname}" "${__b3bp_tmp_value}")'
      fi
    else
      # non-repeatables
      __b3bp_tmp_varname="arg_${__b3bp_tmp_opt:0:1}"
      __b3bp_tmp_default="${!__b3bp_tmp_varname}"

      if [[ -z "${OPTARG}" ]]; then
        __b3bp_tmp_value=$((__b3bp_tmp_default + 1))
      fi

      printf -v "${__b3bp_tmp_varname}" '%s' "${__b3bp_tmp_value}"
    fi
  done

  shift $((OPTIND-1))

  if [[ "${1:-}" = "--" ]] ; then
    shift
  fi
fi

__b3bp_tmp_pos_opt_n="${#}"
for __b3bp_tmp_pos_opt in "${__b3bp_tmp_pos_opt_required[@]}"; do
  __b3bp_tmp_varname="arg_${__b3bp_tmp_pos_opt}"
  printf -v "${__b3bp_tmp_varname}" '%s' "${@:0:1}"
  shift 1 || true
done
for __b3bp_tmp_pos_opt in "${__b3bp_tmp_pos_opt_optional[@]}"; do
  __b3bp_tmp_varname="arg_${__b3bp_tmp_pos_opt}"
  __b3bp_tmp_default="${!__b3bp_tmp_varname}"
  __b3bp_tmp_value="${@:0:1}"
  __b3bp_tmp_value="${__b3bp_tmp_value:-${__b3bp_tmp_default}}"
  printf -v "${__b3bp_tmp_varname}" '%s' "${__b3bp_tmp_value}"
  shift 1 || true
done
if [[ -n "${__b3bp_tmp_pos_opt_varargs}" ]]; then
  __b3bp_tmp_varname="arg_${__b3bp_tmp_pos_opt_varargs}[@]"
  declare -a "${__b3bp_tmp_varname}"='("${!__b3bp_tmp_varname}" "${@}")'
fi

set -o nounset # no more unbound variable references expected


### Automatic validation of required option arguments
##############################################################################

for __b3bp_tmp_varname in ${!__b3bp_tmp_has_arg_*}; do
  # validate only options which required an argument
  [[ "${!__b3bp_tmp_varname}" = "2" ]] || continue

  __b3bp_tmp_opt_short="${__b3bp_tmp_varname##*_}"
  __b3bp_tmp_varname="arg_${__b3bp_tmp_opt_short}"
  [[ "${!__b3bp_tmp_varname}" ]] && continue

  __b3bp_tmp_varname="__b3bp_tmp_opt_short2long_${__b3bp_tmp_opt_short}"
  printf -v "__b3bp_tmp_opt_long" '%s' "${!__b3bp_tmp_varname}"
  [[ "${__b3bp_tmp_opt_long:-}" ]] && __b3bp_tmp_opt_long=" (--${__b3bp_tmp_opt_long//_/-})"

  help "Option -${__b3bp_tmp_opt_short}${__b3bp_tmp_opt_long:-} requires an argument"
done

if [[ ${__b3bp_tmp_pos_opt_n} -lt "${#__b3bp_tmp_pos_opt_required[@]}" ]]; then
  help "At least ${#__b3bp_tmp_pos_opt_required[@]} positional arguments expected, got ${__b3bp_tmp_pos_opt_n}."
fi


### Cleanup Environment variables
##############################################################################

for __tmp_varname in ${!__b3bp_tmp_*}; do
  unset -v "${__tmp_varname}"
done

unset -v __tmp_varname


### Signal trapping and backtracing
##############################################################################

function __b3bp_cleanup_before_exit () {
  debug "Cleaning up. Done"
}
# Uncomment the following line for providing cleanup before exit
# trap __b3bp_cleanup_before_exit EXIT

# requires `set -o errtrace`
__b3bp_err_report() {
    local error_code=${?}
    error "Error in ${__file} in function ${1} on line ${2}"
    exit ${error_code}
}
# Uncomment the following line for always providing an error backtrace
# trap '__b3bp_err_report "${FUNCNAME:-.}" ${LINENO}' ERR


### Command-line argument switches (like -h for showing help page)
##############################################################################

# debug mode
if [[ "${DEBUG_MODE:-}" = "1" ]]; then
  set -o xtrace
  PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  LOG_LEVEL="7"
  # Enable error backtracing
  trap '__b3bp_err_report "${FUNCNAME:-.}" ${LINENO}' ERR
fi

# verbose mode
if [[ "${VERBOSE_MODE:-}" = "1" ]]; then
  set -o verbose
fi

# help mode
if [[ "${arg_h:?}" = "1" ]]; then
  # Help exists with code 1
  help "Help using ${0}"
fi


### Validation. Error out if the things required for your script are not present
##############################################################################

[[ "${LOG_LEVEL:-}" ]] || emergency "Cannot continue without LOG_LEVEL."


### Externally supplied __usage. Nothing else to do here
##############################################################################

if [[ "${__b3bp_external_usage:-}" = "true" ]]; then
  unset -v __b3bp_external_usage
fi
